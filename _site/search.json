[
  {
    "href": "projects.html#overview",
    "title": "Projects",
    "section": "Overview",
    "text": "ACCENT\nCHAI\nEXPANSE"
  },
  {
    "href": "projects.html#accent",
    "title": "Projects",
    "section": "ACCENT",
    "text": "Administrative Cohort on Cerebrovascular Health in Catalonia.\nAll individual adults registered in the public healthcare system of Catalonia in 2015 and no previous stroke were included in the cohort. Residential addresses for 2015 were obtained and expousures of interest were linked.\n\nAnalyses\n\nSO_ACCENT/\nAir pollution and surrounding greenness in relation to ischemic stroke. Avellaneda C.\nSurvival analysis of time-to-stroke."
  },
  {
    "href": "projects.html#expanse",
    "title": "Projects",
    "section": "EXPANSE",
    "text": ""
  },
  {
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "project-structure.html#data-analysis-projects",
    "title": "Reproducible Research",
    "section": "Data analysis projects",
    "text": "The analysis/ folder should contain one sub-folder for each potential paper. The whole data analysis for a given paper should be contained inside one of these sub-folders.\nThe names of these project folders should start with your name initials in capital letters followed by an underscore and a short informative name (i.e. SO_physical-activity).\nThe next subsection tries to give a somewhat detailed introduction to self-contained projects. Then, you will find some straight forward instructions on how one could implement this approach in practice.\n\nSelf-contained projects\nThese sub-folders inside the analysis/ folder must contain all the files, data and code necessary to obtain the final results of the corresponding paper. Any resident R script is written assuming that it will be run from a fresh R process with working directory set to the project directory. It creates everything it needs, in its own workspace or folder, and it touches nothing it did not create. This convention guarantees that the project can be moved around on your computer or onto other computers and will still work.\nIn order to make a project self-contained, it must therefore satisfy the following conditions:\n\n1. File system discipline\nAll files related to a single project must be in a single folder. This applies to data, code, figures, notes, etc. Depending on project complexity, you may organize files into sub-folders.\nA common project structure could be:\n\n\nairpollution/CHAI/analysis/SO_physical-activity\n├── R\n│   ├── fitModel.R\n│   └── readData.R\n├── README.Rmd\n├── README.html\n├── SO_physical-activity.Rproj\n└── data\n    ├── accelerometer.csv\n    └── exposure.rds\n\n\nDifferent projects will require different folder structures but some common minimal rules should be set to facilitate file navigation across projects among all team members.\n\nThe data/ folder should contain all data files (.csv, .xlsx, etc.). If appropriate, consider dividing data files into data-raw/ and data-processed/ sub-folders.\nThe R/ folder should contain all scripts in the analysis. If non-R code is used, add a src/ folder.\nA README file should be included in the root of every data analysis project with the following sections:\n\nAuthor/s: Who wrote the project.\nOverview: A paragraph or two explaining the main objectives of the project.\nProject structure: How files are organized inside the project.\nReproducibility: Instructions on how to independently obtain the results of the analysis.\n\n\nThe README file will help collaborators, as well as future you, understand what the project does and how it is organized. It can be any text document you want, such as a plaint text file, a Word document, or an RMarkdown-generated pdf/html (recommended).\nOther common folders inside of projects are figs/ for figures meant to be shared, docs/ for relevant papers, or reports/ for exploratory data analysis reports.\n\n\n2. Working directory intentionality\nWhen working on Project A, the working directory must be set to Project A’s root folder. Moreover, every time you open a project, it should start in a fresh R session to avoid any interactions with code you might have run beforehand. Please also note that rm(list = ls()) does not make a fresh R session.\nIdeally, this is achieved via development workflow and tooling, not by placing calls to setwd() with absolute paths into the code. I strongly recommend using an Integrated Development Environment (IDE) that supports a project-based workflow. This eliminates the tension between your development convenience and the portability of the code. More details in the next section.\nA consequence of this approach is that you should never save your workspace to .RData on exit. This can be disabled by default in RStudio’s Global and Project Options.\n\n\n\n\n\n\n\n\n\n\n\n\n3. File path discipline\nNo absolute paths should appear in your scripts. Absolute paths are specific to your machine. That is why setting your working directory by baking setwd(\"C:\\Users\\sergio\\path\\that\\only\\I\\have\") into your scripts will not work in other computer. If you change computers or someone else tries to run your analysis on her machine, the code will not work.\nAll paths must be relative to the project’s root folder. That is why we need to include all the necessary files inside our project’s folder. With this setup, we can move the project folder to different folders in our computer, or even to different computers entirely.\nOne last issue to note regarding file paths is that the syntax will be different in different operating systems, even for relative paths. The {here} package provides a simple way to wrap file paths so that they work across any operating system and integrates very smoothly into this project-oriented workflow.\n\n\n\nProjects in practice\n\nUsing RStudio\nTo create a new project use the Create Project command (available on the Projects menu and on the global toolbar). You can create an RStudio project in a brand new directory or in an existing directory where you already have R code and data. This creates a project file (with an .Rproj extension) within the project directory that identifies this folder as the root folder of your project.\nThere are several ways to open an existing project:\n\nUsing the Open Project command (available from both the Projects menu and the Projects toolbar) to browse for and select an existing project file (e.g. MyProject.Rproj).\nSelecting a project from the list of most recently opened projects (also available from both the Projects menu and toolbar).\nDouble-clicking on the project file within the system shell (e.g. Windows Explorer, OSX Finder, etc.).\n\nWhen opening an RStudio project, RStudio starts a fresh R session and sets the current working directory to the root of the project, so there is no need to call setwd() yourself.\nSee this tutorial for more detailed instructions.\n\n\nUsing the {usethis} package\nThe {usethis} R package provides a set of functions to create and manage R projects interactively. They do not need to be RStudio projects.\nUseful functions to be run interactively in the R command line:\n\nCreate a new project with usethis::create_project() and the absolute path where you want to create the project as the argument.\nOpen an existing project with usethis::proj_activate() and the absolute path of the project as argument.\n\n\n\nUsing other IDE\nRStudio may not work well when working remotely with the ISGlobal servers. Other IDE options for programming with R are VScode and Emacs + ESS, which allow running R on remote servers over SSH but are more difficult to set up and use. You can use the {usethis} package to create and manage R projects with these IDEs."
  },
  {
    "href": "project-structure.html#file-names",
    "title": "Reproducible Research",
    "section": "File names",
    "text": "Three principles for file names:\n\nMachine readable:\n\nAvoid spaces, punctuation, accented characters\nCase sensitive, i.e. foo.csv != Foo.csv\n\nHuman readable:\n\nEasy to figure out what something is, based on its name\n\nPlays well with default ordering:\n\nLeft-pad numbers with 0, i.e. 01_read-data.R instead of 1_read-data.R\nUse the ISO 8601 standard for dates, i.e. YYYY-MM-DD_report.Rmd"
  },
  {
    "href": "project-structure.html#code-style",
    "title": "Reproducible Research",
    "section": "Code style",
    "text": "Choose a code style and be consistent. See this or this for some common style guides. One rule that can greatly improve readability is not to exceed 80 characters in any of the lines of your script."
  },
  {
    "href": "project-structure.html#further-reading",
    "title": "Reproducible Research",
    "section": "Further reading",
    "text": "Project-oriented workflow\nWhat they forgot to teach you about R\nWhy should I use the here package when I’m already using projects?\nThe meta-concepts of data analysis, workflows and projects in R"
  },
  {
    "href": "get-started.html#overview",
    "title": "Getting started",
    "section": "Overview",
    "text": "All projects should be stored in one of the following network folders:\n\n\n\nFolder name\nDescription\n\n\n\n\nairpollution\nMain folder\n\n\nhpc_airpollution\nFolder mounted in the SLURM HPC\n\n\ndata/airpollution\nFolder mounted in the ISGWS servers\n\n\n\nThe airpollution server is specially well suited for archiving projects. In some circumstances, the folders hpc_airpollution and data/airpollution may be better suited to store the contents of projects, specially when doing data analysis.\n\nNetwork Folder Structure\nThe organization inside of the main airpollution folder should have the following basic structure to facilitate navigation:\n.\n├── CHAI\n│   ├── analyses\n│   │   ├── OR_atherosclerosis\n│   │   └── SO_physical-activity\n│   ├── documents\n│   │   └── atherosclerosis-proposal.docx\n│   ├── manuscripts\n│   │   └── physical-activity.docx\n│   └── README_CHAI.md\n└── EXPANSE\n    ├── analyses\n    │   ├── AC_air-pollution\n    │   └── NO_movers\n    ├── documents\n    │   └── request_form.xlsx\n    ├── manuscripts\n    │   └── movers.pdf\n    └── README_EXPANSE.md\nThe root of the airpollution network folder should contain directories with the name of the different broad research projects from which papers are meant to be produced. Inside these general folders there should be only three sub-folders:\n\nanalysis/ contains the different projects that involve data analyses. See next section.\ndocuments/ contains all documents relevant to the general research projects (i.e. proposals, relevant papers, data request forms, etc.) and can be further divided into as many sub-folders as needed.\nmanuscripts/ contains the final written manuscripts of all the papers that are preoduced.\n\nA README file should also be placed in the research project’s root folder. Ideally, this file should be a Markdown document named README.md. The document should contain an overview of the given research project, including:\n\nIndividuals involved and corresponding responsabilities\nObjectives\nGeneral structure of the project"
  },
  {
    "href": "get-started.html#getting-access",
    "title": "Getting Started",
    "section": "Getting Access",
    "text": "IT must grant you access before you can connect the network folder. If you do not have access already, contact IT by openning an incidence in the Intranet site or sending an email to sri.tic@isglobal.org. When you do, ask them how you can permanently mount the airpollution network folder in your machine’s file system."
  },
  {
    "href": "get-started.html#workflows",
    "title": "Getting started",
    "section": "Workflows",
    "text": "The airpollution folder should be where all the work that our group does is eventually stored. Ideally, you should be creating and working on projects inside of this network folder from start to finish. This ensures the data is safe from external threats as well as reducing the risk of data loss (the server is backed up every week). Moreover if all the files are always in these shared folders, it is easy to share your work with other members of the group.\nIf you always work in the office at Campus Mar, you can work with these network folders as you do with your local folders. You must be connected via Ethernet cable to the office network and working with one of the workstations in the office or your assigned laptop. Since no VPN connection is needed, everything should just work.\nHowever, when working remotely and data analyses are involved, having the project files in the airpollution network folder can make it difficult or even impossible to run the analyses locally in your machine. This is mainly due to the VPN connection, which limits the bandwidth of data transfer.\nHere are two possible solutions when working remotely:\n\nWork locally\nWhen dealing with non-sensitive data, you can work on your local machine with RStudio, and upload the project to the airpollution server whenever you make significant changes. This is not ideal since you would have to either replace the entire project folder with the new updated project, or copy only new files and folders while making sure stale ones are removed.\n\n\nWork on remote server\nYou can work directly on one of the ISGlobal ISGWS or HPC servers over SSH. With this setup, you can actually run R on the remote server, and keep all project files and folders together and safe. After finishing your project, just copy it to the airpollution server. However, this workflow carries some downsides and requires knowledge of the UNIX shell and/or the use of other IDE like VS-code or Emacs. See the section Remote Servers for more details."
  },
  {
    "href": "add-projects.html",
    "title": "Adding Project Documentation",
    "section": "",
    "text": "This is how you can add a documentation page to the site.\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is the documentation site for the Air Pollution research Group led by Cathryn Tonne at ISGlobal.\nHere we set a general framework for organizing and developing research projects in the group. Adhering to this framework facilitates collaboration among the different members of the team. Moreover, the framework incorporates some best practices that promote open and reproducible science.\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "best-practice.html#data-analysis-projects",
    "title": "Best Practices",
    "section": "Data analysis projects",
    "text": "The analysis/ folder should contain one sub-folder for each potential paper. The whole data analysis for a given paper should be contained inside one of these sub-folders.\nThe names of these project folders should start with your name initials in capital letters followed by an underscore and a short informative name (i.e. SO_physical-activity).\n\nSelf-contained projects\nThese sub-folders inside the analysis/ folder must contain all the files, data and code necessary to obtain the final results of the corresponding paper. Any resident R script is written assuming that it will be run from a fresh R process with working directory set to the project directory. It creates everything it needs, in its own workspace or folder, and it touches nothing it did not create. This convention guarantees that the project can be moved around on your computer or onto other computers and will still work.\nIn order to make a project self-contained, it must therefore satisfy the following conditions:\n\n1. File system discipline\nAll files related to a single project must be in a single folder. This applies to data, code, figures, notes, etc. Depending on project complexity, you may organize files into sub-folders.\nA common project structure could be:\n\nDifferent projects will require different folder structures but some common minimal rules should be set to facilitate file navigation across projects among all team members.\n\nThe data/ folder should contain all data files (.csv, .xlsx, etc.). If appropriate, consider dividing data files into data-raw/ and data-processed/ sub-folders.\nThe R/ folder should contain all scripts in the analysis. If non-R code is used, add a src/ folder.\nA README file should be included in the root of every data analysis project with the following sections:\n\nAuthor/s: Who wrote the project.\nOverview: A paragraph or two explaining the main objectives of the project.\nProject structure: How files are organized inside the project.\nReproducibility: Instructions on how to independently obtain the results of the analysis.\n\n\nThe README file will help collaborators, as well as future you, understand what the project does and how it is organized. It can be any text document you want, such as a plaint text file, a Word document, or an RMarkdown-generated pdf/html (recommended).\nOther common folders inside of projects are figs/ for figures meant to be shared, docs/ for relevant papers, or reports/ for exploratory data analysis reports.\n\n\n2. Working directory intentionality\nWhen working on Project A, the working directory must be set to Project A’s root folder. Moreover, every time you open a project, it should start in a fresh R session to avoid any interactions with code you might have run beforehand. Please also note that rm(list = ls()) does not make a fresh R session.\nIdeally, this is achieved via development workflow and tooling, not by placing calls to setwd() with absolute paths into the code. I strongly recommend using an Integrated Development Environment (IDE) that supports a project-based workflow. This eliminates the tension between your development convenience and the portability of the code. More details in the next section.\nA consequence of this approach is that you should never save your workspace to .RData on exit. This can be disabled by default in RStudio’s Global and Project Options.\n\n\n\n\n3. File path discipline\nNo absolute paths should appear in your scripts. Absolute paths are specific to your machine. That is why setting your working directory by baking setwd(\"C:\\Users\\sergio\\path\\that\\only\\I\\have\") into your scripts will not work in other computer. If you change computers or someone else tries to run your analysis on her machine, the code will not work.\nAll paths must be relative to the project’s root folder. That is why we need to include all the necessary files inside our project’s folder. With this setup, we can move the project folder to different folders in our computer, or even to different computers entirely.\nOne last issue to note regarding file paths is that the syntax will be different in different operating systems, even for relative paths. The {here} package provides a simple way to wrap file paths so that they work across any operating system and integrates very smoothly into this project-oriented workflow.\n\n\n\nProjects in practice\n\nUsing RStudio\nTo create a new project use the Create Project command (available on the Projects menu and on the global toolbar). You can create an RStudio project in a brand new directory or in an existing directory where you already have R code and data. This creates a project file (with an .Rproj extension) within the project directory that identifies this folder as the root folder of your project.\nThere are several ways to open an existing project:\n\nUsing the Open Project command (available from both the Projects menu and the Projects toolbar) to browse for and select an existing project file (e.g. MyProject.Rproj).\nSelecting a project from the list of most recently opened projects (also available from both the Projects menu and toolbar).\nDouble-clicking on the project file within the system shell (e.g. Windows Explorer, OSX Finder, etc.).\n\nWhen opening an RStudio project, RStudio starts a fresh R session and sets the current working directory to the root of the project, so there is no need to call setwd() yourself.\nSee this tutorial for more detailed instructions.\n\n\nUsing the {usethis} package\nThe {usethis} R package provides a set of functions to create and manage R projects interactively. They do not need to be RStudio projects.\nUseful functions to be run interactively in the R command line:\n\nCreate a new project with usethis::create_project() and the absolute path where you want to create the project as the argument.\nOpen an existing project with usethis::proj_activate() and the absolute path of the project as argument.\n\n\n\nUsing other IDE\nRStudio may not work well when working remotely with the ISGlobal servers. Other IDE options for programming with R are VScode and Emacs + ESS, which allow running R on remote servers over SSH but are more difficult to set up and use. You can use the {usethis} package to create and manage R projects with these IDEs."
  },
  {
    "href": "best-practice.html#file-names",
    "title": "Best Practices",
    "section": "File Names",
    "text": "Three principles for file names:\n\nMachine readable:\n\nAvoid spaces, punctuation, accented characters\nCase sensitive, i.e. foo.csv != Foo.csv\n\nHuman readable:\n\nEasy to figure out what something is, based on its name\n\nPlays well with default ordering:\n\nLeft-pad numbers with 0, i.e. 01_read-data.R instead of 1_read-data.R\nUse the ISO 8601 standard for dates, i.e. YYYY-MM-DD_report.Rmd"
  },
  {
    "href": "best-practice.html#code-style",
    "title": "Best Practices",
    "section": "Code Style",
    "text": "Choose a code style and be consistent. See this or this for some common style guides. One rule that can greatly improve readability is not to exceed 80 characters in any of the lines of your script."
  },
  {
    "href": "best-practice.html#further-reading",
    "title": "Best Practices",
    "section": "Further reading",
    "text": "Project-oriented workflow\nWhat they forgot to teach you about R\nWhy should I use the here package when I’m already using projects?\nThe meta-concepts of data analysis, workflows and projects in R"
  },
  {
    "href": "best-practice.html#self-contained-projects",
    "title": "Best Practices",
    "section": "Self-Contained Projects",
    "text": "Data analyses that involve source code should be placed inside a self-contained directory in one of the network folders. Once the analysis is finished, this self-contained folder should be stored in the appropriate analysis/ folder inside the airpollution network folder, if it was not there already.\nThe names of these project folders should start with your name initials in capital letters followed by an underscore and a short informative name (i.e. SO_physical-activity).\nA self-contained folder must contain all the files, data and code necessary to obtain the final results of the analysis. Any resident R script is written assuming that it will be run from a fresh R process with working directory set to the project’s root directory. It creates everything it needs, in its own workspace or folder, and it touches nothing it did not create. This convention guarantees that the project can be moved around on your computer or onto other computers and will still work.\nIn order to make a project self-contained, it must therefore satisfy the following conditions:\n\n1. File system discipline\nAll files related to a single project must be in a single folder. This applies to data, code, figures, notes, etc. Depending on project complexity, you may organize files into sub-folders.\nDifferent projects will require different folder structures but some common minimal rules should be set to facilitate file navigation across projects among all team members.\n\nThe data/ folder should contain all data files (.csv, .xlsx, etc.). If appropriate, consider dividing data files into data-raw/ and data-processed/ sub-folders.\nThe R/ or src/ folder should contain all scripts in the analysis.\nA README.md file should be included in the root of every data analysis project. See next section for details.\n\nA common project structure could be:\n.\n├── data\n│   └── raw-data.csv\n├── master-script.R\n├── output\n│   ├── manuscript.md\n│   ├── plot1.png\n│   └── plot2.png\n├── R\n│   ├── fit-models.R\n│   └── read-data.R\n├── README.md\n├── reports\n│   └── exploratory-report.Rmd\n└── SO_my-analysis.Rproj\nNote that there is a file with the extension .Rproj. This file is created automatically by RStudio when you create an RStudio project. It helps RStudio know that this folder is a project and that the working directory of the associated R session should be the root of this folder. See Projects in Practice for more details.\nOther common folders inside of projects are figs/ for figures meant to be shared, documents/ for relevant papers, or reports/ for exploratory data analysis reports.\n\n\n2. Working directory intentionality\nWhen working on Project A, the working directory must be set to Project A’s root folder. Moreover, every time you open a project, it should start in a fresh R session to avoid any interactions with code you might have run beforehand. Please also note that rm(list = ls()) does not make a fresh R session.\nIdeally, this is achieved via development workflow and tooling, not by placing calls to setwd() with absolute paths into the code. I strongly recommend using an Integrated Development Environment (IDE) that supports a project-based workflow. This eliminates the tension between your development convenience and the portability of the code. More details in the next section.\nA consequence of this approach is that you should never save your workspace to .RData on exit. This can be disabled by default in RStudio’s Global and Project Options.\n\n\n\n\n3. File path discipline\nNo absolute paths should appear in your scripts. Absolute paths are specific to your machine. That is why setting your working directory by baking setwd(\"C:\\Users\\sergio\\path\\that\\only\\I\\have\") into your scripts will not work in other computer. If you change computers or someone else tries to run your analysis on her machine, the code will not work.\nAll paths must be relative to the project’s root folder. That is why we need to include all the necessary files inside our project’s folder. With this setup, we can move the project folder to different folders in our computer, or even to different computers entirely.\nOne last issue to note regarding file paths is that the syntax will be different in different operating systems, even for relative paths. The {here} package provides a simple way to wrap file paths so that they work across any operating system and integrates very smoothly into this project-oriented workflow.\n\n\nProjects in practice\n\nUsing RStudio\nTo create a new project use the Create Project command (available on the Projects menu and on the global toolbar). You can create an RStudio project in a brand new directory or in an existing directory where you already have R code and data. This creates a project file (with an .Rproj extension) within the project directory that identifies this folder as the root folder of your project.\nThere are several ways to open an existing project:\n\nUsing the Open Project command (available from both the Projects menu and the Projects toolbar) to browse for and select an existing project file (e.g. MyProject.Rproj).\nSelecting a project from the list of most recently opened projects (also available from both the Projects menu and toolbar).\nDouble-clicking on the project file within the system shell (e.g. Windows Explorer, OSX Finder, etc.).\n\nWhen opening an RStudio project, RStudio starts a fresh R session and sets the current working directory to the root of the project, so there is no need to call setwd() yourself.\nSee this tutorial for more detailed instructions.\n\n\nUsing the {usethis} package\nThe {usethis} R package provides a set of functions to create and manage R projects interactively. They do not need to be RStudio projects.\nUseful functions to be run interactively in the R command line:\n\nCreate a new project with usethis::create_project() and the absolute path where you want to create the project as the argument.\nOpen an existing project with usethis::proj_activate() and the absolute path of the project as argument.\n\n\n\nUsing other IDE\nRStudio may not work well when working remotely with the ISGlobal servers. Other IDE options for programming with R are VScode and Emacs + ESS, which allow running R on remote servers over SSH but are more difficult to set up and use. You can use the {usethis} package to create and manage R projects with these IDEs."
  },
  {
    "href": "best-practice.html#readme-file",
    "title": "Best Practices",
    "section": "README File",
    "text": "All data analysis projects should contain a README file that helps collaborators, as well as future you, understand what the project does and how it does it. Ideally, this file should be a Markdown document (README.md) or any other plain text file (.txt, .org).\nThe README file should contain at least the following information:\n\nAuthor/s: Who wrote the project.\nOverview: A paragraph or two explaining the main objectives of the project.\nProject structure: How files are organized inside the project.\nReproducibility: Instructions on how to independently obtain the results."
  },
  {
    "href": "best-practice.html#package-version-management",
    "title": "Best Practices",
    "section": "Package Version Management",
    "text": "You can use the renv R package to document and reproduce the package versions you used in your analysis.\nThe general workflow is:\n\nDevelop your analysis as normal, installing and removing R packages as they are needed for the project.\nCall renv::snapshot() to save the state of the project library to the lockfile (called renv.lock) once you think the analysis is done.\nCall renv::restore() to restore the state of the project library.\n\nFor further details check renv’s documentation."
  },
  {
    "href": "best-practice.html#version-control",
    "title": "Best Practices",
    "section": "Version Control",
    "text": "Use git and GitHub for version control whenever possible. This allows to track all changes in the code and revert to a previous state in case of trouble. More importantly, it can make sharing and collaborating with others much easier.\nIf you use GitHub, include the repository URL in the README file.\nIf you are new to version control, you can get started by reading Happy Git and GitHub for the useR."
  },
  {
    "href": "best-practice.html#resources",
    "title": "Best Practices",
    "section": "Resources",
    "text": "Project-oriented workflow\nWhat they forgot to teach you about R\nWhy should I use the here package when I’m already using projects?\nThe meta-concepts of data analysis, workflows and projects in R"
  },
  {
    "href": "remote-servers.html",
    "title": "Working on Remote Servers",
    "section": "",
    "text": "ISGlobal has several servers where you can run your analyses.\n\n\n\nServer Name\nCPUs\nRAM\n\n\n\n\nyamabuki.isglobal.lan\n\n\n\n\nisgws06.isglobal.lan\n\n\n\n\n\nThere are at least three common situations for which you may want to work on these servers:\n\nYou need to analyze data which are subject to\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "remote-servers.html#overview",
    "title": "Remote Servers",
    "section": "Overview",
    "text": "ISGlobal has several servers where you can run your analyses.\n\n\n\nServer Name\nCPUs\nRAM\n\n\n\n\nyamabuki.isglobal.lan\n\n\n\n\nisgws06.isglobal.lan\n\n\n\n\n\nThere are at least four common situations for which you may want to work on these servers:\n\nYou need to analyze data which are subject to privacy clauses and therefore the data must be always in the secure institutional servers.\nYou need more computing power than your laptop’s specs.\nYour code takes a very long time to run.\nYou need to run scripts on a schedule."
  },
  {
    "href": "remote-servers.html#connecting-to-the-servers",
    "title": "Remote Servers",
    "section": "Connecting to the servers",
    "text": ""
  },
  {
    "href": "resources.html#r",
    "title": "Resources",
    "section": "R",
    "text": "R for Data Science\nHands-on Programming with R\nAdvanced R\nWhat they forgot to teach you about R\nThe meta-concepts of data analysis, workflows and projects in R\nProject-oriented workflow"
  },
  {
    "href": "add-content.html",
    "title": "Adding Content",
    "section": "",
    "text": "A brief summary of all projects in the team should be included in the Projects section.\nYou can add a section to the Projects\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "about.html#cathryn-tonne",
    "title": "Team",
    "section": "Cathryn Tonne",
    "text": "PI"
  },
  {
    "href": "about.html#sergio-olmos",
    "title": "Team",
    "section": "Sergio Olmos",
    "text": "Statistician | Data Scientist"
  },
  {
    "href": "best-practice.html#master-script",
    "title": "Best Practices",
    "section": "Master Script",
    "text": "A master script should be provided at the root of the project which produces the final results of the analysis.\nInstead of runing the code in each script “manually” and saving the results, you should have a single master script that orchestrates the whole process, thus making sure that all the results are in-sync. Moreover, a master script can help a colleague looking at your analysis understand how to reproduce your results.\nThere are a few options but a bare-bones approach can be to create a separate script that sources each of your analysis scripts in the right order.\n## master-script.R at the root of your project\nlibrary(tidyverse)\nlibrary(mgcv)\n\nsource(\"R/read-data.R\")\nsource(\"R/fit-models.R\")\nsource(\"R/create-tables.R\")\nsource(\"R/create-figures.R\")\nThere are more sophisticated and helpful ways to provide a master script. Check the targets R package and GNU Makefile."
  },
  {
    "href": "resources.html#unix-shell",
    "title": "Resources",
    "section": "Unix Shell",
    "text": "The missing semester\nData Science at the Command Line"
  },
  {
    "href": "resources.html#version-control",
    "title": "Resources",
    "section": "Version Control",
    "text": "Happy Git and GitHub for the useR\nGit/GitHub Guide: A Minimal Tutorial"
  },
  {
    "href": "resources.html#plain-text-files",
    "title": "Resources",
    "section": "Plain Text files",
    "text": "Markdown"
  },
  {
    "href": "airpollution/EXPANSE/README_EXPANSE.html",
    "title": "Air Pollution Group",
    "section": "",
    "text": "Document Title\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "airpollution/CHAI/README_CHAI.html",
    "title": "Air Pollution Group",
    "section": "",
    "text": "Document Title\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "resources.html#text-editorsides",
    "title": "Resources",
    "section": "Text editors/IDEs",
    "text": "RStudio\nEmacs + ESS\nVS-code + R\nNvim + R"
  },
  {
    "href": "resources.html#reproducible-research",
    "title": "Resources",
    "section": "Reproducible research",
    "text": "targets R package\nGNU Makefile\nrenv\ndocker\nAnaconda"
  },
  {
    "href": "resources.html#writting",
    "title": "Resources",
    "section": "Writting",
    "text": "Markdown\nPandoc\nRMarkdown\nOrg Mode"
  },
  {
    "href": "resources.html#general",
    "title": "Resources",
    "section": "General",
    "text": "The Plain Person’s Guide to Plain Text Social Science"
  },
  {
    "href": "SO_my-analysis/reports/exploratory-report.html",
    "title": "Air Pollution Group",
    "section": "",
    "text": "Document Title\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "SO_my-analysis/output/manuscript.html",
    "title": "Air Pollution Group",
    "section": "",
    "text": "Document Title\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "getting-help.html#minimal-dataset",
    "title": "Getting help with R",
    "section": "Minimal dataset",
    "text": "Instead of supplying the full dataset you are working with, try creating a simplified version that contains the necessary structure to reproduce the problem. The reader should be able to get the data without the need for downloading any external file. The code itself should provide the data. The goal is to make it as easy as possible for someone to reproduce your problem.\nTwo possible ways of providing a minimal data set are creating fake data using R’s built-in functions or using one of R’s built-in datasets.\n\nVectors\nMaking a vector in R is easy. Sometimes it is necessary to add some randomness to it, and there are a whole number of functions to make that. sample() can randomize a vector, or give a random vector with only a few values. letters is a useful vector containing the alphabet, which can be used for making factors.\n\n## From normal distribution\nx <- rnorm(10)\n## From uniform distribution\nx <- runif(10)\n## A permutation of some values\nx <- sample(1:10)\n## A random factor\nx <- sample(letters[1:4], size = 20, replace = TRUE)\n\n\n\nData frames\nYou can create a simple data frame for your example by specifying made-up vectors of the same length inside data.fram() or tibble().\n\ndf <- data.frame(\n  x = sample(1:10),\n  y = sample(c(\"yes\", \"no\"), 10, replace = TRUE)\n)\n\nFor some questions, specific formats can be needed. For these, one can use: as.factor(), as.Date(), etc.\nIt may also be possible to just use one of the built-in datasets in R that is suitable to your problem. You can use library(help = \"datasets\") to see a comprehensive list of all built-in datasets.\n\nairquality[1:5,]\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n\n\nAnother option is to copy your data frame into your reproducible script using dput():\n\nRun dput(my_df) in R, where my_df is your data frame.\nCopy the output.\nIn your reproducible script, type my_df <- and paste."
  },
  {
    "href": "getting-help.html#minimal-code",
    "title": "Getting help with R",
    "section": "Minimal code",
    "text": "Packages should be loaded at the top of the script.\nLoad only the packages necessary for the example to work.\nNo calls to install.packages().\nSpend some time ensuring that your code is easy for others to read:\n\nUse simple, descriptive names for variables and functions.\nUse comments to indicate where your problem lies.\nDo your best to remove everything that is not related to the problem."
  },
  {
    "href": "getting-help.html#sharing",
    "title": "Getting help with R",
    "section": "Sharing",
    "text": "There are many ways for sharing the code with someone:\n\nGitHub Gist\nIf you have a GitHub account you can create Gists that can be shared with a URL. Gists are a great way of sharing scripts. Just Copy your code and paste it in the Gist. Then share it with the person/s you are asking help to.\n\n\nreprex package\nThe reprex R package is specifically designed for producing minimal reproducible examples.\nIf you are asking for help through Slack, you can copy your code into the Clipboard and then run:\n\nreprex::reprex(venue = \"R\")\n\nThis will copy the R code augmented with commented output into the Clipboard. You can then paste it inside a code snippet in Slack and send it as a regular message."
  },
  {
    "href": "getting-help.html#example",
    "title": "Getting help with R",
    "section": "Example",
    "text": "Let’s look at an example. Here is the problem:\n\nAsker: I need to take the average of several variables for all combination of two categorical variables. I have 20+ variables for which I need to take the average. Is there a way to apply the same function (i.e. mean) over several columns in a data frame?\n\nAnd here is a minimal reproducible example:\n\nlibrary(dplyr)\n\ndf <- tibble(\n  year = sample(2018:2020, size = 15, replace = TRUE),\n  scenario = sample(c(\"A\", \"B\"), 15, replace = TRUE),\n  x1 = rnorm(15, mean = 12),\n  x2 = rnorm(15, 18),\n  x3 = rnorm(15, 30)\n)\n\n## I can compute the average of x1, x2, and x3 manually.\n\ndf %>%\n  group_by(year, scenario) %>%\n  summarize(\n    x1 = mean(x1),\n    x2 = mean(x2),\n    x3 = mean(x3)\n  )\n\n## How can I avoid having to repeat the mean() function calls for each variable?\n\nIt is straightforward for someone to copy and paste the code and provide a possible solution:\n\nHelper: You can use the new across() function from the dplyr package inside summarize().\n\n\ndf %>%\n  group_by(year, scenario) %>%\n  summarize(across(.cols = everything(), .fns = mean))\n\n# A tibble: 6 × 5\n# Groups:   year [3]\n   year scenario    x1    x2    x3\n  <int> <chr>    <dbl> <dbl> <dbl>\n1  2018 A         12.4  17.7  31.3\n2  2018 B         13.1  19.0  30.8\n3  2019 A         13.1  16.6  30.5\n4  2019 B         12.2  18.5  29.8\n5  2020 A         11.6  16.8  27.8\n6  2020 B         11.5  18.3  30.2"
  },
  {
    "href": "remote-servers.html#cluster-architecture",
    "title": "HPC Cluster",
    "section": "Cluster Architecture",
    "text": "Node name\nNode type\nCPUs (cores)\nRAM (GB)\n\n\n\n\nyamabuki\nLogin\n32\n256\n\n\nisgws07\nComputing\n72\n512\n\n\nisgws08\nComputing\n72\n512"
  },
  {
    "href": "remote-servers.html#partitions",
    "title": "HPC Cluster",
    "section": "Partitions",
    "text": "The SLURM system provides different partitions (or job queues) which are intended to manage resource allocation according to different time and resource needs.\n\n\n\nPartition name\nMax. Time\nMax. CPUs/Node\nMax. RAM/Node\nNode parallelization\n\n\n\n\ndebug\n2h\n8\n32Gb (8x4)\nNot allowed\n\n\nshort\n2h\n24\n96Gb (24x4)\nAllowed\n\n\nlong\n30h\n48\n192Gb (48x4)\nAllowed\n\n\nno_limits\nNo limit\n72\n432Gb (72x6)\nAllowed\n\n\n\nThe debug partition is well suited for interactive sessions and debugging. It is the default partition, i.e. jobs will be submitted to this partition unless a different partition is specified.\nThe short partition is well suited for short jobs with low resource requirements, while the long partition should be used for jobs with high resource requirements.\nThe no_limits partition should only be used for very specific jobs that require an extemely high amount of resources and/or have very high priority. Access to this partition must be requested to the IT team."
  },
  {
    "href": "remote-servers.html#requirements",
    "title": "HPC Cluster",
    "section": "Requirements",
    "text": "UNIX shell\nYou should be familiar with basic UNIX shell commands.\nFile system navigation:\n## Get current working directory\npwd\n## Change working directory\ncd path/to/directory\n## Change to parent directory of current working directory\ncd ..\n## List folders and files of current working directory\nls\n## Make new directory\nmkdir path/to/new/directory\n## Create new file\ntouch path/to/new/file.txt\nR:\n## Start an interactive R session\nR\n## Run R script non-interactively\nR CMD BATCH path/to/my-script.R\n## Run R script non-interactively\nRscript path/to/my-script.R\n## Evaluate R commands\nRScript -e \"install.packages('tidyverse')\"\n\n\nMiniconda\nMiniconda allows you to install specific software (R, Emacs, etc.) from the Conda repositories inside isolated environments in the cluster. Miniconda is already installed in the cluster. Some useful commands are:\n## Create a new environment\nconda create my-environment\n## Activate a specific environment\nconda activate my-environment\n## Deactivate the active environment\nconda deactivate\n## List all available environments\nconda env list\n## Search software packages\nconda search software-name\n## Install a softaware package from the conda-forge channel in the current env\nconda install -c conda-forge software-name=x.x.x"
  },
  {
    "href": "remote-servers.html#getting-access",
    "title": "HPC Cluster",
    "section": "Getting Access",
    "text": "You will need to ask IT for access to the cluster isgcluster by reporting an IT incidence in the Intranet or sending an email to sri.tic@isglobal.org.\n\nConnecting\nOnce connected to the ISGlobal VPN, you can connect to the login node (yamabuki) by SSH using your ISGlobal credentials.\n\nLinux/MacOS\nOn a bash terminal:\n## By DNS\nssh username@yamabuki.isglobal.lan\n## Or by IP address\nssh username@172.20.10.115\n\n\nWindows\nUsing Putty or MobaXterm connect through SSH to yamabuki.isglobal.lan or 172.20.10.115 in port 22."
  },
  {
    "href": "version-control.html",
    "title": "Air Pollution Group",
    "section": "",
    "text": "Version Control\nUse git and GitHub for version control whenever possible. This allows to track all changes in the code and revert to a previous state in case of trouble. More importantly, it can make sharing and collaborating with others much easier.\nIf you use GitHub, include the repository URL in the README file.\nIf you are new to version control, you can get started by reading Happy Git and GitHub for the useR.\n\n\n\n\nwindow.document.addEventListener(\"DOMContentLoaded\", function (event) {\n  const icon = \"\";\n  const anchorJS = new window.AnchorJS();\n  anchorJS.options = {\n    placement: 'right',\n    icon: icon\n  };\n  anchorJS.add('.anchored');\n  const clipboard = new window.ClipboardJS('.code-copy-button', {\n    target: function(trigger) {\n      return trigger.previousElementSibling;\n    }\n  });\n  clipboard.on('success', function(e) {\n    // button target\n    const button = e.trigger;\n    // don't keep focus\n    button.blur();\n    // flash \"checked\"\n    button.classList.add('code-copy-button-checked');\n    setTimeout(function() {\n      button.classList.remove('code-copy-button-checked');\n    }, 1000);\n    // clear code selection\n    e.clearSelection();\n  });\n  function tippyHover(el, contentFn) {\n    window.tippy(el, {\n      allowHTML: true,\n      content: contentFn,\n      maxWidth: 500,\n      delay: 100,\n      interactive: true,\n      interactiveBorder: 10,\n      theme: 'quarto',\n      placement: 'bottom-start'\n    }); \n  }\n  const noterefs = window.document.querySelectorAll('a[role=\"doc-noteref\"]');\n  for (var i=0; i<noterefs.length; i++) {\n    const ref = noterefs[i];\n    tippyHover(ref, function() {\n      const id = new URL(ref.getAttribute('href')).hash.replace(/^#/, \"\");\n      const note = window.document.getElementById(id);\n      return note.innerHTML;\n    });\n  }\n  var bibliorefs = window.document.querySelectorAll('a[role=\"doc-biblioref\"]');\n  for (var i=0; i<bibliorefs.length; i++) {\n    const ref = bibliorefs[i];\n    const cites = ref.parentNode.getAttribute('data-cites').split(' ');\n    tippyHover(ref, function() {\n      var popup = window.document.createElement('div');\n      cites.forEach(function(cite) {\n        var citeDiv = window.document.createElement('div');\n        citeDiv.classList.add('hanging-indent');\n        citeDiv.classList.add('csl-entry');\n        var biblioDiv = window.document.getElementById('ref-' + cite);\n        if (biblioDiv) {\n          citeDiv.innerHTML = biblioDiv.innerHTML;\n        }\n        popup.appendChild(citeDiv);\n      });\n      return popup.innerHTML;\n    });\n  }\n});"
  },
  {
    "href": "project-structure.html#basic-structure",
    "title": "Data Analysis Projects",
    "section": "Basic Structure",
    "text": "Different projects will require different folder structures but some common minimal rules should be set to facilitate file navigation across projects among all team members.\n\nA README.md file describing the project.\nA data/ folder containing all data files.\nAn R/ or src/ folder containing all scripts in the analysis.\nAn output/ folder with the output of the project.\n\nAll these files/folders should be at the root of the project.\n\nREADME.md\nAll data analysis projects should contain a README file that helps collaborators, as well as future you, understand what the project does and how it does it. The use of Markdown for these files is strongly encouraged.\nThe README file should contain at least the following information:\n\nAuthor/s: Who is involved in the analysis.\nObjectives: A paragraph or two explaining the main objectives of the analysis.\nProject structure: How files are organized inside the project.\nReproducibility: Instructions on how to independently obtain the results.\n\n\n\ndata/\nAll raw data files (.csv, .xlsx, etc.) should be placed in a folder named data/. If appropriate, consider creating two sub-directories data/raw/ and data/processed/.\n\n\n\n\n\n\nWarning\n\n\n\nWhen using Git and GitHub for version control, add this folder to the .gitignore file from the start so that possibly sensitive data is not tracked by Git and accidentally uploaded to GitHub.\n\n\n\n\nR/\nAll R scripts should be placed inside a folder named R/. If you are using a programming language other than R, name this folder src/.\nThe code underlying the analysis should be divided into several scripts of a few hundred lines grouped by specific tasks, i.e. read-data.R, fit-models.R, …\nEach script should be standalone. That is, you should be able to run a given script without having to run any other script beforehand. For instance, if you save the data frames that you created in read-data.R inside the data/processed/ folder, you should then explicitly read these files from data/processed/ in any other script that uses these data frames. Do not assume that the read-data.R script has been evaluated in any subsequent script.\n\n\n\n\n\n\nAlso note that all file paths in your scripts should be relative to the root of the project. Do not use absolute file paths unless strictly necessary. See Reproducible Research for more details.\n\n\n\n\n\noutput/\nAll output files created by code that are meant to be publicly shared should be stored inside the output/ folder. These output files could include the manuscript of the paper associated with the analysis, the PNG files with the figures used in the paper, or any other output file meant to be shared with others."
  },
  {
    "href": "project-structure.html#projects-in-practice",
    "title": "Data Analysis Projects",
    "section": "Projects in practice",
    "text": "A common project structure could be:\n.\n├── data\n│   └── raw-data.csv\n├── master-script.R\n├── output\n│   ├── manuscript.md\n│   ├── plot1.png\n│   └── plot2.png\n├── R\n│   ├── fit-models.R\n│   └── read-data.R\n├── README.md\n├── reports\n│   └── exploratory-report.Rmd\n└── SO_my-analysis.Rproj\nOther common folders inside of projects are figs/ for figures meant to be shared, documents/ for relevant papers, or reports/ for exploratory data analysis reports.\n\n\n\n\n\n\nMaster script\n\n\n\nNote that there is a file called master-script.R in the root of the project. This file orchestrates all the scripts in the R/ folder to produce the results of the analysis. See the Reproducible Research section for more details.\n\n\n\nUsing RStudio\nTo create a new project use the Create Project command (available on the Projects menu and on the global toolbar). You can create an RStudio project in a brand new directory or in an existing directory where you already have R code and data. This creates a project file (.Rproj) within the project directory that tells RStudio this is the root folder of your project.\nThere are several ways to open an existing project:\n\nUsing the Open Project command (available from both the Projects menu and the Projects toolbar) to browse for and select an existing project file (e.g. MyProject.Rproj).\nSelecting a project from the list of most recently opened projects (also available from both the Projects menu and toolbar).\nDouble-clicking on the project file within the system file explorer (e.g. Windows Explorer, OSX Finder, etc.).\n\n\n\n\n\n\n\nWhen opening an RStudio project, RStudio starts a fresh R session and sets the current working directory to the root of the project, so there is no need to call setwd() yourself. See why this is important in Reproducible Research.\n\n\n\nSee this RStudio tutorial for more detailed instructions.\n\n\nUsing other IDE\nIDEs make it easy to work within this project-oriented workflow. You may prefer to use an IDE other than RStudio, such as VScode or Emacs + ESS, which come with their own project-related tools. In fact, these editors may be preferable when working on the remote cluster as they allow interacting with remote R sessions over SSH.\n\n\nUsing the {usethis} package\nThe {usethis} R package provides a set of functions to create and manage R projects interactively. They do not need to be RStudio projects.\nUseful functions to be run interactively in the R command line:\n\nCreate a new project with usethis::create_project() and the absolute path where you want to create the project as the argument.\nOpen an existing project with usethis::proj_activate() and the absolute path of the project as argument."
  },
  {
    "href": "reproducible-research.html#self-contained-projects",
    "title": "Air Pollution Group",
    "section": "Self-contained projects",
    "text": "Working directory intentionality\nWhen working on a self-contained project, the working directory must be set to the project’s root folder. Moreover, every time you open a project, it should start in a fresh R session to avoid any interactions with code you might have run beforehand. Please also note that rm(list = ls()) does not make a fresh R session.\nIdeally, this is achieved via development workflow and tooling, not by placing calls to setwd() with absolute paths into the code. I strongly recommend using an Integrated Development Environment (IDE) that supports a project-based workflow. This eliminates the tension between your development convenience and the portability of the code. More details in the next section.\nA consequence of this approach is that you should never save your workspace to .RData on exit. This can be disabled by default in RStudio’s Global and Project Options.\n\n\n\n\nFile path discipline\nNo absolute paths should appear in your scripts. Absolute paths are specific to your machine. That is why setting your working directory by baking setwd(\"C:\\Users\\sergio\\path\\that\\only\\I\\have\") into your scripts will not work in other computer. If you change computers or someone else tries to run your analysis on her machine, the code will not work.\nAll paths must be relative to the project’s root folder. That is why we need to include all the necessary files inside our project’s folder. With this setup, we can move the project folder to different folders in our computer, or even to different computers entirely.\nOne last issue to note regarding file paths is that the syntax will be different in different operating systems, even for relative paths. The {here} package provides a simple way to wrap file paths so that they work across any operating system and integrates very smoothly into this project-oriented workflow."
  },
  {
    "href": "reproducible-research.html#master-script",
    "title": "Air Pollution Group",
    "section": "Master Script",
    "text": "A master script should be provided at the root of the project which produces the final results of the analysis. The name of this master script should be indicated in the README file of the project.\nInstead of runing the code in each script “manually” and saving the results, you should have a single master script that orchestrates the whole process, thus making sure that all the results are in-sync. Moreover, a master script can help a colleague looking at your analysis understand how to reproduce your results.\nThere are a few options but a bare-bones approach can be to create a separate script that sources each of your analysis scripts in the right order.\n## master-script.R at the root of your project\nlibrary(tidyverse)\nlibrary(mgcv)\n\nsource(\"R/read-data.R\")\nsource(\"R/fit-models.R\")\nsource(\"R/create-tables.R\")\nsource(\"R/create-figures.R\")\nThere are more sophisticated and helpful ways to provide a master script. Check the targets R package and GNU Make."
  },
  {
    "href": "reproducible-research.html#package-version-management",
    "title": "Air Pollution Group",
    "section": "Package Version Management",
    "text": "You can use the renv R package to document and reproduce the package versions you used in your analysis.\nThe general workflow is:\n\nDevelop your analysis as normal, installing and removing R packages as they are needed for the project.\nCall renv::snapshot() to save the state of the project library to the lockfile (called renv.lock) once you think the analysis is done.\nCall renv::restore() to restore the state of the project library.\n\nFor further details check renv’s documentation."
  },
  {
    "href": "get-started.html#network-folder-structure",
    "title": "Getting started",
    "section": "Network Folder Structure",
    "text": "airpollution\nThe organization inside of the main airpollution folder should have the following basic structure to facilitate navigation:\n.\n├── CHAI\n│   ├── analyses\n│   │   ├── OR_atherosclerosis\n│   │   └── SO_physical-activity\n│   ├── documents\n│   │   └── atherosclerosis-proposal.docx\n│   ├── manuscripts\n│   │   └── physical-activity.docx\n│   └── README_CHAI.md\n└── EXPANSE\n    ├── analyses\n    │   ├── AC_air-pollution\n    │   └── NO_movers\n    ├── documents\n    │   └── request_form.xlsx\n    ├── manuscripts\n    │   └── movers.pdf\n    └── README_EXPANSE.md\nThe root of the airpollution network folder should contain directories with the name of the different broad research projects from which papers are meant to be produced. Inside these general folders there should be only three sub-folders:\n\nanalysis/ contains the different projects that involve data analyses. See the Project Structure section for how to structure data analysis projects.\ndocuments/ contains all documents relevant to the general research projects (i.e. proposals, relevant papers, data request forms, etc.) and can be further divided into as many sub-folders as needed.\nmanuscripts/ contains the final written manuscripts of all the papers that are preoduced.\n\nA README file should also be placed in the research project’s root folder. Ideally, this file should be a Markdown document named README.md. The document should contain an overview of the given research project, including:\n\nIndividuals involved and corresponding responsabilities.\nObjectives.\nGeneral structure of the project.\n\n\n\nhpc_airpollution\nThe organization of the group network folder hpc_airpollution mounted in the HPC cluster can be more flexible. One simple way to organize the different projects inside this network folder is creating a directory named as your user, and store all your projects inside this directory.\n\n\n\n\n\n\nAs mentioned before, all projects in hpc_airpollution should be moved to the appropriate path inside the airpollution network folder once the project is done."
  },
  {
    "href": "style-guide.html#file-names",
    "title": "Air Pollution Group",
    "section": "File Names",
    "text": "Three principles for file names:\n\nMachine readable:\n\nAvoid spaces, punctuation, accented characters\nCase sensitive, i.e. foo.csv != Foo.csv\n\nHuman readable:\n\nEasy to figure out what something is, based on its name\n\nPlays well with default ordering:\n\nLeft-pad numbers with 0, i.e. 01_read-data.R instead of 1_read-data.R\nUse the ISO 8601 standard for dates, i.e. YYYY-MM-DD_report.Rmd"
  },
  {
    "href": "style-guide.html#code-style",
    "title": "Air Pollution Group",
    "section": "Code Style",
    "text": "Choose a code style and be consistent. See this or this for some common style guides.\n\n\n\n\n\n\nOne rule that can greatly improve readability is to never exceed 80 characters in any of the lines of your script."
  },
  {
    "href": "get-started.html#requirements",
    "title": "Getting Started",
    "section": "Requirements",
    "text": "User account\nISGlobal email address account\nFortinet VPN client for remote access\n\n\n\n\n\n\n\nNote that your user account is different from your ISGlobal Gmail account and will have different credentials.\n\n\n\nThe VPN is only necessary if you will be accessing the ISGlobal network (i.e. Intranet, network folders) remotely. This includes being connected to Campus Mar’s WiFi. If you have been assigned an institutional laptop/desktop you can connect to the ISGlobal network through Ethernet cable at Campus Mar, in which case no VPN connection is needed.\n\n\n\n\n\n\nRemote Access\n\n\n\nWhen working remotely through the VPN, some operations such as opening files or reading/writing data from/to the network folders will be slower, as the VPN will limit the bandwidth speed."
  },
  {
    "href": "network-folders.html#structure",
    "title": "Air Pollution Group",
    "section": "Structure",
    "text": "airpollution\nThe organization inside of the main airpollution folder should have the following basic structure to facilitate navigation:\n.\n├── CHAI\n│   ├── analyses\n│   │   ├── OR_atherosclerosis\n│   │   └── SO_physical-activity\n│   ├── documents\n│   │   └── atherosclerosis-proposal.docx\n│   ├── manuscripts\n│   │   └── physical-activity.docx\n│   └── README_CHAI.md\n└── EXPANSE\n    ├── analyses\n    │   ├── AC_air-pollution\n    │   └── NO_movers\n    ├── documents\n    │   └── request_form.xlsx\n    ├── manuscripts\n    │   └── movers.pdf\n    └── README_EXPANSE.md\nThe root of the airpollution network folder should contain directories with the name of the different broad research projects from which papers are meant to be produced. Inside these general folders there should be only three sub-folders:\n\nanalysis/ contains the different projects that involve data analyses. See the Project Structure section for how to structure data analysis projects.\ndocuments/ contains all documents relevant to the general research projects (i.e. proposals, relevant papers, data request forms, etc.) and can be further divided into as many sub-folders as needed.\nmanuscripts/ contains the final written manuscripts of all the papers that are preoduced.\n\nA README file should also be placed in the research project’s root folder. Ideally, this file should be a Markdown document named README.md. The document should contain an overview of the given research project, including:\n\nIndividuals involved and corresponding responsabilities.\nObjectives.\nGeneral structure of the project.\n\n\n\nhpc_airpollution\nThe organization of the group network folder hpc_airpollution mounted in the HPC cluster can be more flexible. One simple way to organize the different projects inside this network folder is creating a directory named as your user, and store all your projects inside this directory.\n\n\n\n\n\n\nAs mentioned before, all projects in hpc_airpollution should be moved to the appropriate path inside the airpollution network folder once the project is done."
  },
  {
    "href": "version-control.html#github-organization-site",
    "title": "Air Pollution Group",
    "section": "GitHub Organization Site",
    "text": "A GitHub Organization has been created for our group, where all version controlled projects should be hosted. The purpose of this site is to easily find, navigate and collaborate on largely source code based projects.\nThe Organization site is private, meaning that only allowed GitHub users can see its contents. You must have a GitHub account and contact Sergio Olmos (sergio.olmos@isglobal.org) requesting access. You will shortly receive an invitation to join the organization at GitHub."
  },
  {
    "href": "version-control.html#quickstart",
    "title": "Air Pollution Group",
    "section": "Quickstart",
    "text": "Below you can find a quick guide to get up and running with Git and GitHub for your projects using the bash shell (Git Bash in Windows).\n\n\n\n\n\n\nIf you are new to Git or you are having trouble setting it up, you should read the more detailed Happy Git and GitHub for the useR, which also shows how to work with Git in RStudio.\n\n\n\n\nSetup\n\nGet a GitHub account.\nDownload and install Git.\nSet up Git with your user name and email:\ngit config --global user.name \"Your name here\"\ngit config --global user.email \"your_email@example.com\"\nSet up SSH on your computer.\n\nLook to see if you have files ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub or similar.\nIf not, create such public/private keys:\n\nssh-keygen -t ed25519 -C \"Descriptive-comment\"\n\nAdd key to ssh-agent, substituting the correct name for your key:\n\nssh-add ~/.ssh/id_ed25519\nProvide public key to GitHub:\n\nCopy your public key.\nPaste it in GitHub: Account Settings > SSH Keys > Add SSH Key.\nTest it:\n\nssh -T git@github.com\n\n\n\nTypical use\n\nClone a remote GitHub repository into your local machine:\n\ngit clone git@github.com:user/repo.git\n\nMake your existing local project a Git repository:\n\ngit init\n\nAdd a remote repository to your existing local Git repository (after creating an empty GitHub repo):\n\ngit remote add origin git@github.com:user/repo.git\n\nPush and cement the tracking relationship between your local default branch (main here) and GitHub:\n\ngit push --set-upstream origin main\n\nAdd/stage specific files:\n\ngit add R/clean-data.R R/fit-models.R\n\nCommit staged modifications:\n\ngit commit -m \"A short message explaining changes made\"\n\nPush changes to the linked remote repo:\n\ngit push"
  },
  {
    "href": "version-control.html#how-often-to-commit",
    "title": "Air Pollution Group",
    "section": "How often to commit?",
    "text": "It is better to do many small commits, each for a set of related changes:\n\nThink of a small part of the analysis that needs to be added or fixed.\nDo the work.\nTest that it works.\nAdd and commit.\n\nLook at others’ projects on GitHub to see what they do and what sort of commit messages they write."
  },
  {
    "href": "version-control.html#what-to-commit",
    "title": "Air Pollution Group",
    "section": "What to commit?",
    "text": "In general, commit only plain-text files (i.e. source code)."
  },
  {
    "href": "reproducible-research.html#project-oriented-workflow",
    "title": "Air Pollution Group",
    "section": "Project-Oriented Workflow",
    "text": "Working directory intentionality\nWhen working on a self-contained project as the one described before, the working directory must be set to the project’s root folder. Moreover, every time you open a project, it should start in a fresh R session to avoid any interactions with code you might have run beforehand.\n\n\n\n\n\n\nNote that rm(list = ls()) does not make a fresh R session since this will not detach packages.\n\n\n\nIdeally, this is achieved via development workflow and tooling, not by placing calls to setwd() with absolute paths into the code. I strongly recommend using an Integrated Development Environment (IDE) that supports a project-based workflow. This eliminates the tension between your development convenience and the portability of the code. More details in the next section.\nA consequence of this approach is that you should never save your workspace to .RData on exit. This can be disabled by default in RStudio’s Global Options.\n\n\n\nFile path discipline\nIn general, no absolute paths should appear in your scripts. Absolute paths are specific to your machine. That is why setting your working directory by baking setwd(\"C:\\Users\\sergio\\path\\that\\only\\I\\have\") into your scripts will not work in other computer. If you change computers or someone else tries to run your analysis on her machine, the code will not work.\nAll paths must be relative to the project’s root folder. That is why we need to include all the necessary files inside our project’s folder. With this setup, we can move the project folder to different folders in our computer, or even to different computers entirely.\nOne last issue to note regarding file paths is that the syntax will be different in different operating systems, even for relative paths. The {here} package provides a simple way to wrap file paths so that they work across any operating system and integrates very smoothly into this project-oriented workflow."
  }
]